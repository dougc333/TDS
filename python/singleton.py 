#testfile singleton dont use teh Eckel python patterns


#metaclass
class Singleton(type):
  def __init__(cls, name, bases,dict):
    super(Singleton,cls).__init__(name, bases,dict)
    cls.instance=None

  def __call__(cls,*args,**kw):
    if cls.instance==None:
      cls.instance=super(Singleton,cls).__call__(*args,**kw)
    return cls.instance
  
class TestClass(object):
  __metaclass__=Singleton

a = TestClass('a')
b = TestClass('b')
print(a)
print(b)